/******************************************************************************
 * Copyright (c) 2015, AllSeen Alliance. All rights reserved.
 *
 *    Permission to use, copy, modify, and/or distribute this software for any
 *    purpose with or without fee is hereby granted, provided that the above
 *    copyright notice and this permission notice appear in all copies.
 *
 *    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 *    WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 *    MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 *    ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 *    WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 *    ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 *    OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 ******************************************************************************/
#include "LsInclude.h"


using namespace ajn;
using namespace std;
using namespace qcc;


static const char* mgmtJoiner = NULL;
//static ajn::SessionPort mgmtPort = ajn::SESSION_PORT_ANY;
static ajn::SessionPort mgmtPort = 1234;

static const char* const mgmtIname = "org.alljoyn.locationservices.Management";
static ajn::InterfaceDescription* mgmtIntf = NULL;



LsManager::LsManager(ajn::BusAttachment* msgBus ) 
        : BusObject("/Management"), msgBus(msgBus), aboutData("en"), aboutObj(NULL)
{
    this->SetDescription("en", "Locationservices Management");

    aboutData.SetAppId(guid);
    aboutData.SetDefaultLanguage("en");
    aboutData.SetSupportedLanguage("en");
    aboutData.SetDeviceName("Locationservices Hub", "en");
    aboutData.SetDeviceId("1f9a85a2-a519-11e5-bf7f-feff819cdc9f");
    //aboutData.SetDeviceId("26144417-c00b-414a-a34f-d96b01234e56");
    aboutData.SetAppName("alljoyn.locationservices", "en");
    aboutData.SetManufacturer("Liquid Motion", "en");
    aboutData.SetModelNumber("123456");
    aboutData.SetDescription("Locationservices Discovery And Notification", "en");
    //aboutData.SetDateOfManufacture("2015-07-21");
    aboutData.SetSoftwareVersion("0.0.1");
    //aboutData.SetHardwareVersion("0.0.1");
    //aboutData.SetSupportUrl("http://www.alljoyn.org");
    assert(aboutData.IsValid());
}

LsManager::~LsManager()
{
    QCC_DbgPrintf(("~LsManager"));

    /* Unregister the bus object. */
    msgBus->UnregisterBusObject(*this);

    /* Reclaim memory. */
    delete aboutObj;
    delete lsObject;
}

QStatus LsManager::StartApi()
{
    QStatus status = (msgBus != NULL) ? ER_OK : ER_FAIL;

    /* Start the message bus. */
    if (status == ER_OK) {
        status = msgBus->Start();
    }

    // Add the Management interface.
    if (status == ER_OK) {
        status = msgBus->CreateInterface(mgmtIname, mgmtIntf, ajn::InterfaceSecurityPolicy::AJ_IFC_SECURITY_OFF );

        if (status == ER_OK) {
            //status = mgmtIntf->AddSignal("HubNormal", NULL, NULL, MEMBER_ANNOTATE_SESSIONCAST);

            mgmtIntf->SetDescriptionLanguage("en");
            mgmtIntf->SetDescription(mgmtIname);            

            status = mgmtIntf->AddSignal("HubNormal", NULL, NULL, 0, NULL);

            if (status == ER_OK) {
                status = mgmtIntf->AddSignal("DiscoveryInjectDeviceDetected", NULL, NULL, 0, NULL);
            }
            if (status == ER_OK) {
                status = mgmtIntf->AddSignal("DiscoveryInjectDeviceLost", NULL, NULL, 0, NULL);
            }
            if (status == ER_OK) {
                status = mgmtIntf->AddSignal("TrackingChangePresenceDetected", NULL, NULL, 0, NULL);
            }
            if (status == ER_OK) {
                status = mgmtIntf->AddSignal("TrackingChangePresenceLost", NULL, NULL, 0, NULL);
            }
            if (status == ER_OK) {
                status = mgmtIntf->AddMethod("HubPing", NULL, NULL, NULL, MEMBER_ANNOTATE_NO_REPLY);
            }                
        }

        if (status == ER_OK) {
            status = mgmtIntf->SetMemberDescription("HubNormal", "Hub Status Normal");

            if (status == ER_OK) {
                status = mgmtIntf->SetMemberDescription("DiscoveryInjectDeviceDetected", "Discovery Inject - Device Detected");
            }
            if (status == ER_OK) {
                status = mgmtIntf->SetMemberDescription("DiscoveryInjectDeviceLost", "Discovery Inject - Device Lost");
            }
            if (status == ER_OK) {
                status = mgmtIntf->SetMemberDescription("TrackingChangePresenceDetected", "Presence Change - Detected");
            }
            if (status == ER_OK) {
                status = mgmtIntf->SetMemberDescription("TrackingChangePresenceLost", "Presence Change - Lost");
            }
            if (status == ER_OK) {
                status = mgmtIntf->SetMemberDescription("HubPing", "Hub Ping");
            }
        }

        if (status == ER_OK) {
            mgmtIntf->Activate();
            status = AddInterface(*mgmtIntf, ANNOUNCED);
        }

        if (status == ER_OK) {
            const MethodEntry handlers[] = {
                { mgmtIntf->GetMember("HubPing"), static_cast<MessageReceiver::MethodHandler>(&LsManager::HubPing) },
            };
            status = AddMethodHandlers(handlers, ArraySize(handlers));
        }

        if (status == ER_OK) {
                status = msgBus->RegisterBusObject(*this);
        }

        //QCC_DbgPrintf(("LSMANAGER INTF: %s:%s %s:%s", 
        //               mgmtIntf->GetDescriptionLanguage(),
        //               mgmtIntf->HasDescription() ? "has-description" : "no-description",
        //               mgmtIntf->GetMember("HubNormal")->description.c_str(),
        //               mgmtIntf->GetMember("HubNormal")->isSessioncastSignal ? "sessioncast": "???"));
    }

    /* Create the remaining interfaces of interest on the bus. */
    if (status == ER_OK) {
        status = msgBus->CreateInterfacesFromXml(org_alljoyn_locationservices::Locationservices::InterfaceXml);
    }
    if (status == ER_OK) {
        status = msgBus->CreateInterfacesFromXml(org_alljoyn_locationservices::PresenceTracker::InterfaceXml);
    }
    if (status == ER_OK) {
        status = msgBus->CreateInterfacesFromXml(org_alljoyn_locationservices::DistanceTracker::InterfaceXml);
    }

    /* Create the database and start the Locationservices API. */
    if (status == ER_OK) {
        lsDb = new LsDatabase();
        lsObject = new Locationservices(msgBus, lsDb, this);
        status = lsObject->Start();
    }

    /* Locate and connect to a router. */
    if (status == ER_OK) {
        status = msgBus->Connect();
    }

    /* Request a service name. */
    if (status == ER_OK) {
	    const uint32_t flags = DBUS_NAME_FLAG_REPLACE_EXISTING | DBUS_NAME_FLAG_DO_NOT_QUEUE;
	    status = msgBus->RequestName("org.alljoyn.locationservices", flags);
    }

    /* Make the message bus available for use. */
    //ajn::SessionPort port = ajn::SESSION_PORT_ANY;
    //ajn::SessionPort port = 1234;
    //ajn::SessionOpts opts;
    //ajn::SessionOpts opts( SessionOpts::TrafficType::TRAFFIC_MESSAGES,
    //                       false,
    //                       SessionOpts::PROXIMITY_ANY,
    //                       ajn::TRANSPORT_TCP );
    //ajn::SessionOpts opts( SessionOpts::TrafficType::TRAFFIC_MESSAGES,
    //                       false,
    //                       SessionOpts::PROXIMITY_ANY,
    //                       ajn::TRANSPORT_ANY );
    ajn::SessionOpts opts( SessionOpts::TrafficType::TRAFFIC_MESSAGES,
                           true,
                           SessionOpts::PROXIMITY_ANY,
                           ajn::TRANSPORT_ANY );

    if (status == ER_OK) {
        status = msgBus->BindSessionPort(mgmtPort, opts, *static_cast<SessionPortListener*>(this));
    }

    /* Advertise the service. */
    if (status == ER_OK) {
        const ajn::TransportMask mask = ajn::TRANSPORT_ANY;
        status = msgBus->AdvertiseName(org_alljoyn_locationservices::ServiceName, mask);
    }

    /* Announce the services. */
    if (status == ER_OK) {
        aboutObj = new AboutObj(*msgBus);
        status = ((aboutData.IsValid("en")) && (aboutObj != NULL)) 
            ? aboutObj->Announce(mgmtPort, aboutData) 
            : ER_FAIL;
    }
   

    /* Set the timestamps. */
    if (status == ER_OK) {
        apiTimestamp = ajn::BusAttachment::GetTimestamp();
        statusTimestamp = ajn::BusAttachment::GetTimestamp();
    }
 
    QCC_DbgPrintf(("StartApi: %s", QCC_StatusText(status)));
 
    return status;
}

void LsManager::CheckApi() 
{
    QStatus status;
    uint32_t currTimestamp = ajn::BusAttachment::GetTimestamp();

    if ((currTimestamp - apiTimestamp) >= 15000) {
        apiTimestamp = currTimestamp;

        if (lsObject != NULL) {
            lsObject->Check();
        }
    }

    if ((currTimestamp - statusTimestamp) >= 60000) {
        statusTimestamp = currTimestamp;

        // This works for LsTrax.
        //status = this->Signal(NULL, 
        //                      SESSION_ID_ALL_HOSTED, 
        //                      *(mgmtIntf->GetMember("HubNormal")), 
        //                      NULL, 
        //                      0);
        
        // This works for Higgns.
        status = this->Signal(NULL, 
                              0, 
                              *(mgmtIntf->GetMember("HubNormal")), 
                              NULL, 
                              0, 
                              0, 
                              ajn::ALLJOYN_FLAG_SESSIONLESS);
        QCC_DbgPrintf(("HubNormal Signal - %s", QCC_StatusText(status)));
    }
}

void LsManager:: DiscoveryBroadcast(bool isDetected) {
    QStatus status;

    try {
        const ajn::InterfaceDescription::Member* member = 
            ((isDetected) 
             ? mgmtIntf->GetMember("DiscoveryInjectDeviceDetected")
             : mgmtIntf->GetMember("DiscoveryInjectDeviceLost"));

        // This works for Higgns.
        status = this->Signal(NULL, 
                              0, 
                              *member, 
                             NULL, 
                              0, 
                              0, 
                              ajn::ALLJOYN_FLAG_SESSIONLESS);

    } catch(std::exception& e) {
        status = ER_FAIL;
        QCC_DbgPrintf(("DiscoveryBroadcast Exception: %s\n", e.what())); 
    }

    if (status != ER_OK) {
        QCC_DbgPrintf(("Discovery Broadcast - %s", QCC_StatusText(status)));
    }
}

void LsManager:: TrackingBroadcast(bool isDetected) {
    QStatus status;

    try {
        const ajn::InterfaceDescription::Member* member = 
            ((isDetected) 
             ? mgmtIntf->GetMember("TrackingChangePresenceDetected")
             : mgmtIntf->GetMember("TrackingChangePresenceLost"));

        // This works for Higgns.
        status = this->Signal(NULL, 
                              0, 
                              *member, 
                              NULL, 
                              0, 
                              0, 
                              ajn::ALLJOYN_FLAG_SESSIONLESS);

    } catch(std::exception& e) {
        status = ER_FAIL;
        QCC_DbgPrintf(("TrackingBroadcast Exception: %s\n", e.what())); 
    }

    if (status != ER_OK) {
        QCC_DbgPrintf(("Tracking Broadcast - %s", QCC_StatusText(status)));
    }
}

bool LsManager::AcceptSessionJoiner(ajn::SessionPort sessionPort, const char* joiner, const SessionOpts& opts) 
{
    QCC_DbgPrintf(("AcceptSessionJoiner sessionPort %d, joiner %s, opts %s", sessionPort, joiner, opts.ToString().c_str()));

    bool result = (sessionPort == mgmtPort);
    return( result );
}

void LsManager::SessionJoined(ajn::SessionPort sessionPort, ajn::SessionId id, const char* joiner)
{
    QCC_DbgPrintf(("SessionJoined sessionPort %d, id %d, joiner %s", sessionPort, id, joiner));
    mgmtJoiner = joiner;
}

void LsManager::HubPing(const ajn::InterfaceDescription::Member* member, ajn::Message& msg) {
    QCC_DbgPrintf(("HubPing"));

    try {
        msgBus->EnableConcurrentCallbacks();
        MethodReply(msg);

    } catch(std::exception& e) {
        QCC_DbgPrintf(("HubPing Exception: %s\n", e.what())); 
    }
    return;
}


