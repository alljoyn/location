<?xml version="1.0"?>
<node xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://www.alljoyn.org/schemas/introspect.xsd">
  <interface name="org.alljoyn.locationservices.Proximity">
    <annotation name="org.alljoyn.Bus.Secure" value="true"/>
    <property name="Version" type="q" access="read">
      <annotation name="org.freedesktop.DBus.Property.EmitsChangedSignal" value="false"/>
    </property>
    <struct name="Entity">
      <field name="entityId" type="s"/>
      <field name="entityMac" type="s"/>
    </struct>
    <!--
        subscribe for events that occur when firstEntity and secondEntity are in proximity.
        Events are only sent again if the proximity change is  more than deltaDistance (measured in cm)
    -->
    <method name="SubscribeEntityDistanceTracking">
      <arg name="firstEntity" type="[Entity]" direction="in"/>
      <arg name="secondEntity" type="[Entity]" direction="in"/>
      <arg name="distanceDelta" type="i" direction="in"/>
    </method>
    <!--
        send a signal when the two entities are less than Distance from each other
        e.g, let me know when my son is near the fridge
    -->
    <method name="SubscribeEntityGeofenceTracking">
      <arg name="firstEntity" type="[Entity]" direction="in"/>
      <arg name="secondEntity" type="[Entity]" direction="in"/>
      <arg name="distance" type="i" direction="in"/>
    </method>
    <!--
        send a notification when any other Entity is within a specified
        distance to the passed Entity
        e.g., let me know when anything gets near the fridge
    -->
    <method name="SubscribeForAnyProximateEntity">
      <arg name="entity" type="[Entity]" direction="in"/>
      <arg name="distance" type="i" direction="in"/>
    </method>
    <method name="UnsubscribeEntityDistanceTracking">
      <arg name="firstEntity" type="(ss)" direction="in"/>
      <arg name="secondEntity" type="[Entity]" direction="in"/>
    </method>
    <method name="UnsubscribeEntityGeofenceTracking">
      <arg name="firstEntity" type="(ss)" direction="in"/>
      <arg name="secondEntity" type="(ss)" direction="in"/>
      <arg name="distance" type="i" direction="in"/>
    </method>
    <method name="UnsubscribeForAnyProximateEntity">
      <arg name="entity" type="[Entity]" direction="in"/>
    </method>
    <!-- server side API -->
    <method name="SetProximityDistance">
      <arg name="firstEntity" type="[Entity]" direction="in"/>
      <arg name="secondEntity" type="[Entity]" direction="in"/>
      <arg name="distance" type="i" direction="in"/>
      <arg name="distanceMultiplier" type="i" direction="in"/>
      <arg name="accuracy" type="i" direction="in"/>
      <arg name="accuracyMultiplier" type="i" direction="in"/>
    </method>
    <method name="SetDefaultServiceEntity">
      <arg name="myEntity" type="[Entity]" direction="in"/>
    </method>
    <method name="SetDefaultProximityAccuracy">
      <arg name="entity" type="[Entity]" direction="in"/>
      <arg name="accuracy" type="i" direction="in"/>
      <arg name="accuracyMultiplier" type="i" direction="in"/>
    </method>
    <method name="QueryProximity">
      <arg name="firstEntity" type="[Entity]" direction="in"/>
      <arg name="secondEntity" type="[Entity]" direction="in"/>
      <arg name="distance" type="i" direction="out"/>
      <arg name="distanceMultiplier" type="i" direction="out"/>
      <arg name="accuracy" type="i" direction="out"/>
      <arg name="accuracyMultiplier" type="i" direction="out"/>
    </method>
    <!-- gets all the entities that are within a specified distance -->
    <method name="QueryAllProximity">
      <arg name="entity" type="[Entity]" direction="in"/>
      <arg name="distance" type="i" direction="in"/>
      <arg name="distanceMultiplier" type="i" direction="in"/>
      <arg name="nearbyEntities" type="a[Entity]" direction="out"/>
    </method>
    <signal name="ProximityChanged" sessioncast="true">
      <arg name="firstEntity" type="[Entity]" direction="out"/>
      <arg name="secondEntity" type="[Entity]" direction="out"/>
      <arg name="distance" type="i" direction="out"/>
      <arg name="distanceMultiplier" type="i" direction="out"/>
      <arg name="accuracy" type="i" direction="out"/>
      <arg name="accuracyMultiplier" type="i" direction="out"/>
    </signal>
  </interface>
</node>
